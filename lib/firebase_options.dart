// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyDRHoh5GWLbmPf6hjUPP9kNwHQLeLavsyY',
    appId: '1:913873955007:android:80f2b36423c58805af7e0a',
    messagingSenderId: '913873955007',
    projectId: 'lolchat-42c84',
    storageBucket: 'lolchat-42c84.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyDRHoh5GWLbmPf6hjUPP9kNwHQLeLavsyY',
    appId: '1:913873955007:android:80f2b36423c58805af7e0a',
    messagingSenderId: '373951124359',
    projectId: 'lolchat-42c84',
    storageBucket: 'auto-cllan.appspot.com',
    androidClientId:
        '913873955007-04u234fro94svhanlg7oomk0lh9o48c3.apps.googleusercontent.com',
    iosClientId:
        '924925024049-5ds550rjofrc389r1u3p50nmsbaojp8o.apps.googleusercontent.com',
    iosBundleId: 'com.autocllan.App',
  );
}

class PlayIntegrity {
  static const MethodChannel _channel = MethodChannel('play_integrity');

  static Future<String?> checkIntegrity() async {
    try {
      final String? result = await _channel.invokeMethod('checkIntegrity');
      return result;
    } catch (e) {
      print('Play Integrity check failed: $e');
      return null;
    }
  }
}
